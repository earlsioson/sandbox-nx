# =============================================================================
# 6. INFRASTRUCTURE ADAPTERS (CORRECTED IMPLEMENTATIONS)
# File: 06-infrastructure-adapters.d2
# =============================================================================

vars: {
  d2-config: {
    layout-engine: tala
  }
}

# Repository Adapters (Secondary Adapters - Implement Ports)
repository_adapters: Repository Adapters {
  PostgreSQLProgramEnrollmentRepository: PostgreSQLProgramEnrollmentRepository {
    shape: class
    label: "PostgreSQLProgramEnrollmentRepository\n<<implements ProgramEnrollmentRepositoryPort>>"

    # Infrastructure Dependencies
    dependencies: "Infrastructure Dependencies:\n• TypeORM EntityManager\n• PostgreSQL Database\n• Connection Pool"

    separator1: "──────────────────────────────"

    # Port Implementation
    save: "+save(enrollment: ProgramEnrollment): Promise<void>"
    findById: "+findById(id: EnrollmentId): Promise<ProgramEnrollment>"
    findByPatient: "+findByPatient(patientId: PatientId): Promise<ProgramEnrollment[]>"
    findByFacility: "+findByFacility(facilityId: FacilityId): Promise<ProgramEnrollment[]>"
    findByStatus: "+findByStatus(status: EnrollmentStatusType): Promise<ProgramEnrollment[]>"
    findByCriteria: "+findByCriteria(criteria: EnrollmentSearchCriteria): Promise<ProgramEnrollment[]>"

    separator2: "──────────────────────────────"

    # Private Translation Methods
    toDomainModel: "-toDomainModel(entity: ProgramEnrollmentEntity): ProgramEnrollment"
    toPersistenceModel: "-toPersistenceModel(enrollment: ProgramEnrollment): ProgramEnrollmentEntity"
    mapAuditTrail: "-mapAuditTrail(entries: AuditTrailEntity[]): AuditTrailEntry[]"

    note: "Implements repository port\nHandles domain ↔ persistence translation"
  }

  PostgreSQLPatientRepository: PostgreSQLPatientRepository {
    shape: class
    label: "PostgreSQLPatientRepository\n<<implements PatientRepositoryPort>>"

    # Infrastructure Dependencies  
    dependencies: "Infrastructure Dependencies:\n• TypeORM EntityManager\n• Patient Entity Mapping\n• Database Transactions"

    separator1: "──────────────────────────────"

    # Port Implementation
    save: "+save(patient: Patient): Promise<void>"
    findById: "+findById(id: PatientId): Promise<Patient>"
    findByMedicalRecord: "+findByMedicalRecord(recordNumber: MedicalRecordNumber): Promise<Patient>"
    findByPCCId: "+findByPCCId(pccId: PCCPatientId): Promise<Patient>"
    searchByCriteria: "+searchByCriteria(criteria: PatientSearchCriteria): Promise<Patient[]>"

    separator2: "──────────────────────────────"

    # Domain Model Translation
    toDomainModel: "-toDomainModel(entity: PatientEntity): Patient"
    toPersistenceModel: "-toPersistenceModel(patient: Patient): PatientEntity"
    buildSearchQuery: "-buildSearchQuery(criteria: PatientSearchCriteria): SelectQueryBuilder"

    note: "Patient persistence adapter\nDomain model isolation"
  }

  S3DocumentRepository: S3DocumentRepository {
    shape: class
    label: "S3DocumentRepository\n<<implements DocumentStoragePort>>"

    # Infrastructure Dependencies
    dependencies: "Infrastructure Dependencies:\n• AWS S3 Client\n• S3 Bucket Configuration\n• Presigned URL Generator"

    separator1: "──────────────────────────────"

    # Port Implementation
    store: "+store(document: Document): Promise<DocumentId>"
    retrieve: "+retrieve(documentId: DocumentId): Promise<Document>"
    generateDownloadUrl: "+generateDownloadUrl(documentId: DocumentId): Promise<string>"
    delete: "+delete(documentId: DocumentId): Promise<void>"
    listByEnrollment: "+listByEnrollment(enrollmentId: EnrollmentId): Promise<DocumentMetadata[]>"

    separator2: "──────────────────────────────"

    # S3-Specific Operations
    uploadToS3: "-uploadToS3(key: string, content: Buffer): Promise<void>"
    generatePresignedUrl: "-generatePresignedUrl(key: string, expiration: number): string"
    deleteFromS3: "-deleteFromS3(key: string): Promise<void>"
    buildDocumentKey: "-buildDocumentKey(enrollmentId: EnrollmentId, fileName: string): string"

    note: "S3 storage adapter\nDocument lifecycle management"
  }
}

# Integration Adapters (External System Adapters)
integration_adapters: Integration Adapters {
  PointClickCareAPIClient: PointClickCareAPIClient {
    shape: class
    label: "PointClickCareAPIClient\n<<implements PCCIntegrationPort>>"

    # Infrastructure Dependencies
    dependencies: "Infrastructure Dependencies:\n• HTTP Client (Axios)\n• PCC API Credentials\n• Rate Limiting\n• Circuit Breaker"

    separator1: "──────────────────────────────"

    # Port Implementation
    getPatientData: "+getPatientData(patientId: PatientId): Promise<EHRData>"
    refreshPatientData: "+refreshPatientData(patientId: PatientId): Promise<EHRData>"
    getLabResults: "+getLabResults(patientId: PatientId): Promise<LabResult[]>"
    getDiagnosisCodes: "+getDiagnosisCodes(patientId: PatientId): Promise<DiagnosisCode[]>"
    subscribeToUpdates: "+subscribeToUpdates(patientId: PatientId): Promise<void>"

    separator2: "──────────────────────────────"

    # API-Specific Operations
    callPCCAPI: "-callPCCAPI(endpoint: string, params: any): Promise<PCCResponse>"
    transformPCCResponse: "-transformPCCResponse(response: PCCResponse): EHRData"
    handleAPIError: "-handleAPIError(error: PCCAPIError): void"
    retryWithBackoff: "-retryWithBackoff(operation: () => Promise<any>): Promise<any>"

    note: "PCC API integration\nError handling & resilience"
  }

  EmailNotificationAdapter: EmailNotificationAdapter {
    shape: class
    label: "EmailNotificationAdapter\n<<implements NotificationPort>>"

    # Infrastructure Dependencies
    dependencies: "Infrastructure Dependencies:\n• Email Service (SendGrid/SES)\n• Template Engine\n• Configuration Management"

    separator1: "──────────────────────────────"

    # Port Implementation (Partial)
    sendEmail: "+sendEmail(recipient: EmailAddress, message: EmailMessage): Promise<void>"
    sendRoleBasedNotifications: "+sendRoleBasedNotifications(enrollment: ProgramEnrollment, eventType: NotificationEventType): Promise<void>"

    separator2: "──────────────────────────────"

    # Email-Specific Operations
    renderTemplate: "-renderTemplate(templateName: string, data: any): string"
    sendBulkEmails: "-sendBulkEmails(recipients: EmailAddress[], message: EmailMessage): Promise<void>"
    trackDelivery: "-trackDelivery(emailId: string): Promise<DeliveryStatus>"

    note: "Email delivery adapter\nTemplate rendering & tracking"
  }

  SMSNotificationAdapter: SMSNotificationAdapter {
    shape: class
    label: "SMSNotificationAdapter\n<<implements NotificationPort>>"

    # Infrastructure Dependencies
    dependencies: "Infrastructure Dependencies:\n• SMS Provider (Twilio)\n• Phone Number Validation\n• Rate Limiting"

    separator1: "──────────────────────────────"

    # Port Implementation (Partial)
    sendSMS: "+sendSMS(recipient: PhoneNumber, message: SMSMessage): Promise<void>"

    separator2: "──────────────────────────────"

    # SMS-Specific Operations
    validatePhoneNumber: "-validatePhoneNumber(phoneNumber: PhoneNumber): boolean"
    formatMessage: "-formatMessage(message: SMSMessage): string"
    trackDelivery: "-trackDelivery(messageId: string): Promise<DeliveryStatus>"

    note: "SMS delivery adapter\nValidation & tracking"
  }
}

# Event Handlers (React to Domain Events)
event_handlers: Event Handlers {
  NotificationEventHandler: NotificationEventHandler {
    shape: class

    # Dependencies (Notification Ports)
    dependencies: "Dependencies:\n• NotificationPort implementations\n• User Repository\n• Notification Templates"

    separator1: "──────────────────────────────"

    # Event Handling
    handleEnrollmentInitiated: "@EventHandler(EnrollmentInitiatedEvent)\n+handle(event: EnrollmentInitiatedEvent): Promise<void>"
    handleQualificationCompleted: "@EventHandler(QualificationCompletedEvent)\n+handle(event: QualificationCompletedEvent): Promise<void>"
    handleStatusChanged: "@EventHandler(PatientStatusChangedEvent)\n+handle(event: PatientStatusChangedEvent): Promise<void>"

    separator2: "──────────────────────────────"

    # Private Notification Logic
    sendEnrollmentNotifications: "-sendEnrollmentNotifications(enrollment: ProgramEnrollment): Promise<void>"
    determineNotificationRecipients: "-determineNotificationRecipients(event: DomainEvent): NotificationRecipient[]"
    createNotificationMessage: "-createNotificationMessage(event: DomainEvent, recipient: NotificationRecipient): NotificationMessage"

    note: "Handles domain events\nTriggers notifications"
  }

  AuditEventHandler: AuditEventHandler {
    shape: class

    # Dependencies
    dependencies: "Dependencies:\n• AuditTrailRepositoryPort\n• Event Serialization"

    separator1: "──────────────────────────────"

    # Event Handling
    handleAllDomainEvents: "@EventHandler(DomainEvent)\n+handle(event: DomainEvent): Promise<void>"

    separator2: "──────────────────────────────"

    # Audit Operations
    createAuditEntry: "-createAuditEntry(event: DomainEvent): AuditTrailEntry"
    serializeEventData: "-serializeEventData(event: DomainEvent): string"

    note: "Automatic audit logging\nCompliance tracking"
  }

  IntegrationEventHandler: IntegrationEventHandler {
    shape: class

    # Dependencies
    dependencies: "Dependencies:\n• Message Bus\n• External System Adapters\n• Event Transformation"

    separator1: "──────────────────────────────"

    # Event Handling
    handleDomainEvents: "@EventHandler(DomainEvent)\n+handle(event: DomainEvent): Promise<void>"

    separator2: "──────────────────────────────"

    # Integration Operations
    transformToIntegrationEvent: "-transformToIntegrationEvent(domainEvent: DomainEvent): IntegrationEvent"
    publishToPlatform: "-publishToPlatform(integrationEvent: IntegrationEvent): Promise<void>"

    note: "Cross-application events\nPlatform integration"
  }
}

# Database Entities (Persistence Models - NOT Domain Models)
persistence_entities: Persistence Entities {
  ProgramEnrollmentEntity: ProgramEnrollmentEntity {
    shape: class
    label: "<<Database Entity>> ProgramEnrollmentEntity"

    # Database Columns
    id: "+id: string"
    patientId: "+patientId: string"
    programType: "+programType: string"
    status: "+status: string"
    statusReason: "+statusReason: string"
    assignedSpecialistId: "+assignedSpecialistId: string"
    createdAt: "+createdAt: Date"
    updatedAt: "+updatedAt: Date"

    # Relationships
    patient: "+patient: PatientEntity"
    auditTrail: "+auditTrail: AuditTrailEntity[]"
    documents: "+documents: DocumentEntity[]"

    note: "Database persistence model\nSeparate from domain model"
  }

  PatientEntity: PatientEntity {
    shape: class
    label: "<<Database Entity>> PatientEntity"

    # Database Columns
    id: "+id: string"
    firstName: "+firstName: string"
    lastName: "+lastName: string"
    dateOfBirth: "+dateOfBirth: Date"
    medicalRecordNumber: "+medicalRecordNumber: string"
    pccPatientId: "+pccPatientId: string"
    facilityId: "+facilityId: string"
    createdAt: "+createdAt: Date"
    updatedAt: "+updatedAt: Date"

    note: "Patient database entity\nPersistence mapping only"
  }
}

# External Systems
external_systems: External Systems {
  PostgreSQLDatabase: PostgreSQL Database {
    shape: cylinder

    schemas: "Schemas:\n• program_enrollments\n• patients\n• audit_trail\n• user_management"

    note: "Relational persistence\nACID compliance"
  }

  PointClickCareAPI: PointClickCare API {
    shape: cloud

    endpoints: "API Endpoints:\n• /patients/{id}\n• /lab-results/{patientId}\n• /diagnoses/{patientId}\n• /webhooks/subscribe"

    note: "External EHR system\nRESTful API"
  }

  AmazonS3: Amazon S3 {
    shape: cloud

    buckets: "S3 Buckets:\n• niv-documents\n• audit-reports\n• temp-uploads"

    note: "Document storage\nPersistent file system"
  }
}

# Adapter Dependencies (Implement Ports)
repository_adapters.PostgreSQLProgramEnrollmentRepository -> external_systems.PostgreSQLDatabase: "persists to"
repository_adapters.PostgreSQLPatientRepository -> external_systems.PostgreSQLDatabase: "persists to"
repository_adapters.S3DocumentRepository -> external_systems.AmazonS3: "stores in"

integration_adapters.PointClickCareAPIClient -> external_systems.PointClickCareAPI: "integrates with"

# Repository Implementations use Persistence Entities
repository_adapters.PostgreSQLProgramEnrollmentRepository -> persistence_entities.ProgramEnrollmentEntity: "maps to/from"
repository_adapters.PostgreSQLPatientRepository -> persistence_entities.PatientEntity: "maps to/from"

# Event Handlers Dependencies
event_handlers.NotificationEventHandler -> integration_adapters.EmailNotificationAdapter: "uses"
event_handlers.NotificationEventHandler -> integration_adapters.SMSNotificationAdapter: "uses"
event_handlers.AuditEventHandler -> repository_adapters.PostgreSQLProgramEnrollmentRepository: "uses"
