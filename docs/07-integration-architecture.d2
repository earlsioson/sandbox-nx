# =============================================================================
# 7. INTEGRATION ARCHITECTURE
# File: 07-integration-architecture.d2
# =============================================================================

vars: {
  d2-config: {
    layout-engine: tala
  }
}

# External Systems Ecosystem
external_ecosystem: External Systems Ecosystem {
  pointclickcare_platform: PointClickCare Platform {
    shape: cloud

    pcc_api: PCC API Gateway {
      endpoints: "Available Endpoints:\n• GET /patients/{id}\n• GET /patients/{id}/labs\n• GET /patients/{id}/diagnoses\n• POST /webhooks/subscribe"

      note: "EHR system integration\nPatient clinical data source"
    }

    pcc_webhooks: PCC Webhooks {
      events: "Webhook Events:\n• patient.updated\n• lab.results.available\n• diagnosis.updated\n• admission.created"

      note: "Real-time event notifications\nImmediate clinical updates"
    }
  }

  nursing_home_platform: Nursing Home Platform Ecosystem {
    shape: cloud

    existing_apps: Existing Applications {
      reporting_compliance: "Reporting Compliance App\n• Facility compliance tracking\n• Regulatory reporting"
      risk_legal: "Risk Legal Tool\n• Litigation management\n• Risk assessment"
      transport_signage: "Transport & Signage\n• Patient transport\n• Facility navigation"
      axi_admit: "AXI Admit Application\n• Patient admissions\n• Initial assessments"

      note: "70-80 nursing home facilities\nShared platform applications"
    }

    shared_platform_services: Shared Platform Services {
      sso_service: "Single Sign-On\n• User authentication\n• Role management"
      user_management: "User Management\n• User profiles\n• Permission systems"
      platform_events: "Platform Event Bus\n• Cross-app communication\n• System-wide events"
      audit_system: "Centralized Audit\n• Compliance logging\n• System-wide audit trail"

      note: "Platform-wide shared services\nCross-application functionality"
    }
  }
}

# NIV Application Architecture
niv_application: NIV Application (Hexagonal Architecture) {
  # Presenters Layer (Primary Adapters)
  presenters: Presenters Layer {
    api_gateway: API Gateway {
      authentication: "Authentication:\n• JWT token validation\n• Role-based access control\n• Request rate limiting"

      routing: "Routing:\n• REST endpoint mapping\n• Request validation\n• Response formatting"

      note: "Entry point for all HTTP requests\nSecurity and routing layer"
    }

    rest_controllers: REST Controllers {
      PatientSearchController: "• GET /api/patients/search\n• GET /api/enrollments/search\n• GET /api/enrollments/facility/{id}"
      ProgramEnrollmentController: "• POST /api/enrollments\n• PUT /api/enrollments/{id}/qualify\n• PUT /api/enrollments/{id}/activate"
      AuditTrailController: "• GET /api/audit/enrollment/{id}\n• POST /api/audit/report"

      note: "HTTP endpoints\nRequest/Response transformation"
    }

    webhook_handlers: Webhook Handlers {
      PCCWebhookHandler: "• Handle PCC patient updates\n• Process lab result notifications\n• Manage diagnosis changes"
      PlatformEventHandler: "• Process cross-app events\n• Handle platform notifications\n• Coordinate shared workflows"

      note: "Inbound event processing\nReal-time integration handling"
    }
  }

  # Application Layer (Orchestration)
  application_services: Application Services {
    ProgramEnrollmentService: "• Create enrollments\n• Process qualifications\n• Manage state transitions"
    PatientSearchService: "• Search patients and enrollments\n• Filter and sort results\n• Generate view models"
    AuditTrailService: "• Track user actions\n• Generate compliance reports\n• Manage audit history"
    NotificationDisplayService: "• Aggregate notifications\n• Format for display\n• Mark as read/unread"

    note: "Orchestration layer\nNo business logic"
  }

  # Domain Core (Business Logic)
  domain_core: Domain Core {
    aggregates: "• NIVProgramEnrollment (Aggregate Root)\n• Patient\n• ClinicalSpecialist"
    domain_services: "• NIVEligibilityService\n• SpecialistAssignmentService"
    value_objects: "• EnrollmentStatus\n• PatientDemographics\n• NotificationSummary"
    domain_events: "• EnrollmentInitiatedEvent\n• QualificationCompletedEvent\n• PatientStatusChangedEvent"

    note: "Pure business logic\nZero external dependencies"
  }

  # Infrastructure Layer (Secondary Adapters)
  infrastructure: Infrastructure Layer {
    repositories: Repository Adapters {
      PostgreSQLProgramEnrollmentRepository: "Implements ProgramEnrollmentRepositoryPort"
      PostgreSQLPatientRepository: "Implements PatientRepositoryPort"
      PostgreSQLAuditRepository: "Implements AuditTrailRepositoryPort"

      note: "Data persistence adapters\nImplement port interfaces"
    }

    external_adapters: External System Adapters {
      PointClickCareAPIClient: "Implements PCCIntegrationPort"
      EmailNotificationService: "Implements NotificationPort"
      S3DocumentStorageService: "Implements DocumentStoragePort"

      note: "External system adapters\nImplement port interfaces"
    }

    event_handlers: Event Handlers {
      NotificationEventHandler: "Handles domain events for notifications"
      AuditEventHandler: "Handles domain events for audit trail"
      IntegrationEventHandler: "Transforms and publishes integration events"

      note: "Domain event subscribers\nSide effects and integrations"
    }
  }
}

# Enhanced Event Architecture (NEW - Clearer Event Type Distinctions)
event_architecture: Event Architecture Layers {
  # Internal Domain Events (Stay within NIV Application)
  domain_events: Domain Events (Internal) {
    shape: hexagon
    style.fill: "#E3F2FD"

    characteristics: "Characteristics:\n• Rich domain context\n• Internal to NIV application\n• Can evolve freely\n• Detailed business information\n• Never cross system boundaries"

    examples: "Internal Domain Events:\n• EnrollmentInitiatedEvent\n• QualificationCompletedEvent\n• PatientStatusChangedEvent\n• DeviceFittingScheduledEvent\n• DocumentUploadedEvent\n• ConsentResponseReceivedEvent"

    usage_rules: "Usage Rules:\n• Published by domain aggregates\n• Handled by NIV event handlers\n• Contain rich business context\n• Can change without external impact"

    note: "Internal business events\nRich domain context"
  }

  # Event Transformation Layer (NEW - Explicit Transformation)
  event_transformation: Event Transformation Layer {
    shape: diamond
    style.fill: "#FFF3E0"

    transformation_service: Domain to Integration Event Mapper {
      mapEnrollmentInitiated: "EnrollmentInitiatedEvent → PatientEnrolledInNIVProgram"
      mapQualificationCompleted: "QualificationCompletedEvent → NIVQualificationStatusChanged"
      mapStatusChanged: "PatientStatusChangedEvent → NIVQualificationStatusChanged"
      mapProgramActivated: "ProgramActivatedEvent → PatientCareTransitionEvent"

      note: "Transforms internal events to external events\nData format standardization"
    }

    transformation_rules: Transformation Rules {
      data_mapping: "Data Mapping:\n• Domain IDs → Platform IDs\n• Rich objects → Simple primitives\n• Business context → Standard codes\n• Domain enums → Platform strings"

      schema_versioning: "Schema Versioning:\n• Backward compatible changes\n• Version headers in events\n• Deprecation notices\n• Migration support"

      note: "Rules for event transformation\nPlatform compatibility"
    }
  }

  # External Integration Events (Cross System Boundaries)
  integration_events: Integration Events (External) {
    shape: hexagon
    style.fill: "#E8F5E8"

    characteristics: "Characteristics:\n• Minimal, stable schema\n• Cross-application boundaries\n• Versioned for compatibility\n• Platform-standardized format\n• Must remain backward compatible"

    examples: "Integration Events:\n• PatientEnrolledInNIVProgram\n• NIVQualificationStatusChanged\n• ComplianceAuditRequired\n• PatientCareTransitionEvent\n• NIVProgramCompletedEvent\n• RiskProfileUpdatedEvent"

    usage_rules: "Usage Rules:\n• Published to platform event bus\n• Consumed by other applications\n• Simple, stable data structure\n• Cannot break consuming applications"

    note: "Cross-application events\nStable platform schema"
  }
}

# Event & Message Infrastructure
messaging_infrastructure: Event & Message Infrastructure {
  domain_event_bus: Domain Event Bus {
    shape: hexagon

    internal_events: "Internal Domain Events:\n• EnrollmentInitiatedEvent\n• QualificationCompletedEvent\n• PatientStatusChangedEvent\n• DocumentUploadedEvent"

    event_handlers: "Registered Handlers:\n• NotificationEventHandler\n• AuditEventHandler\n• IntegrationEventHandler"

    note: "In-process event bus\nDomain event distribution"
  }

  integration_event_bus: Integration Event Bus {
    shape: hexagon

    cross_app_events: "Cross-Application Events:\n• PatientEnrolledInNIVProgram\n• NIVQualificationStatusChanged\n• ComplianceAuditRequiredEvent"

    platform_integration: "Platform Integration:\n• Event transformation\n• Message routing\n• Delivery guarantees"

    note: "Platform-wide event bus\nCross-application communication"
  }

  message_queues: Asynchronous Processing {
    notification_queue: "Notification Queue\n• Email notifications\n• SMS notifications\n• Push notifications"

    audit_processing: "Audit Processing Queue\n• Compliance logging\n• Audit report generation\n• Document archival"

    integration_processing: "Integration Queue\n• PCC data synchronization\n• Platform event publishing\n• Webhook processing"

    note: "Reliable message processing\nAsynchronous operation handling"
  }
}

# Data & Document Storage
persistence_layer: Data & Document Storage {
  niv_database: NIV Database {
    shape: cylinder

    core_data: "Core Tables:\n• program_enrollments\n• patients\n• clinical_specialists\n• audit_trail_entries"

    operational_data: "Operational Tables:\n• notifications\n• user_preferences\n• document_metadata\n• system_configuration"

    note: "Transactional data storage\nACID compliance"
  }

  document_storage: Document Storage {
    shape: cylinder

    medical_documents: "Medical Documents:\n• Patient consent forms\n• Clinical assessments\n• Lab results\n• Device configuration docs"

    system_documents: "System Documents:\n• Audit reports\n• Compliance reports\n• Configuration backups\n• Log archives"

    note: "Secure document storage\nHIPAA compliant"
  }

  cache_layer: Caching Layer {
    shape: hexagon

    application_cache: "Application Cache:\n• Frequently accessed patients\n• User session data\n• Notification summaries"

    integration_cache: "Integration Cache:\n• PCC API responses\n• Platform user data\n• Configuration settings"

    note: "Performance optimization\nReduced external calls"
  }
}

# Integration Patterns & Data Flows

# Primary Integration Flows (Inbound)
external_ecosystem.pointclickcare_platform.pcc_webhooks -> niv_application.presenters: "Real-time clinical updates"
external_ecosystem.nursing_home_platform.existing_apps -> niv_application.presenters: "Cross-app patient events"
external_ecosystem.nursing_home_platform.shared_platform_services.platform_events -> niv_application.presenters: "Platform-wide events"

# API Gateway Processing
niv_application.api_gateway -> niv_application.presenters: "Authenticated requests"
niv_application.presenters -> niv_application.application_services: "Orchestrate use cases"

# Domain Processing
niv_application.application_services -> niv_application.domain_core: "Execute business logic"
niv_application.domain_core -> event_architecture.domain_events: "Publish internal domain events"

# Event Transformation Flow (Enhanced)
event_architecture.domain_events -> event_architecture.event_transformation: "Transform internal to external events"
event_architecture.event_transformation -> event_architecture.integration_events: "Publish to platform event bus"

# Infrastructure Processing
niv_application.application_services -> niv_application.infrastructure: "Persist data & integrate"
niv_application.infrastructure -> persistence_layer.niv_database: "Data operations"
niv_application.infrastructure -> persistence_layer.document_storage: "Document operations"

# Event Processing Flows
messaging_infrastructure.domain_event_bus -> niv_application.infrastructure.event_handlers: "Handle domain events"
niv_application.infrastructure.event_handlers -> messaging_infrastructure.message_queues: "Queue async operations"
niv_application.infrastructure.event_handlers -> event_architecture.event_transformation: "Transform domain events"

# External Integration Flows (Outbound)
niv_application.infrastructure.external_adapters -> external_ecosystem.pointclickcare_platform.pcc_api: "Fetch clinical data"
event_architecture.integration_events -> external_ecosystem.nursing_home_platform.shared_platform_services.platform_events: "Cross-app notifications"
niv_application.infrastructure.external_adapters -> external_ecosystem.nursing_home_platform.shared_platform_services.sso_service: "User authentication"

# Caching Optimization
niv_application.infrastructure.external_adapters -> persistence_layer.cache_layer: "Cache external data"
niv_application.application_services -> persistence_layer.cache_layer: "Cache application data"

# Integration Patterns Legend
integration_patterns: Integration Patterns {
  synchronous_api: "Synchronous API Calls\n• Direct request-response\n• Immediate data needs\n• User-initiated actions"

  asynchronous_events: "Asynchronous Events\n• Loose coupling\n• Eventually consistent\n• Business state changes"

  webhook_integration: "Webhook Integration\n• Real-time notifications\n• External system events\n• Push-based updates"

  message_queuing: "Message Queuing\n• Reliable processing\n• Retry mechanisms\n• Load leveling"

  event_transformation: "Event Transformation\n• Domain to integration events\n• Schema standardization\n• Platform compatibility"

  note: "Integration pattern types\nChoose based on requirements"
}

# Security & Compliance Layers
security_compliance: Security & Compliance {
  authentication: "Authentication Layer\n• JWT token validation\n• Multi-factor authentication\n• Session management"

  authorization: "Authorization Layer\n• Role-based access control\n• Resource-level permissions\n• Audit logging"

  data_encryption: "Data Encryption\n• Data at rest encryption\n• Data in transit encryption\n• Key management"

  compliance_monitoring: "Compliance Monitoring\n• HIPAA compliance\n• Audit trail requirements\n• Data retention policies"

  note: "Healthcare compliance\nSecurity at every layer"
}
